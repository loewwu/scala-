1. 代码中语句不会产生结果，它的执行的是产生结果之外的其他操作，语句可以改变状态；而表达式则倾向于表达，即运行产生结果；
ex： val i=1; val j=2
i+j 可以产生结果；

例如：
val c = {
      val i =1
      val j = 2*i
      i/(j*0.5)
    }
    println("c = " + c)
    
2. 课后习题：
    val feetPerMile = 5280
    val yardsPerMile = feetPerMile/3.0
    val xMiles = 2000/feetPerMile

    val x = {
      val feetPerMile = 5280
      val yardsPerMile = feetPerMile/3.0
      2000/feetPerMile
    }
    println(x)
    
   备注：
   val x = println(5)
   println(x)
   
   运行后会生成 5 ()
   该类表达式不会产生值，则返回是一个Unit
    
3. 条件表达式
用来判断表达式是true或者false，基于测试结果执行其操作；真假为Boolean表达式；
注意： ！否操作
① if()
② if()... else ...
③ if()... else if() ... else ...
eg:
val result = {
      val i = 5
      val j =6
      if(i<=j) {
        "it is true."
      }
      else {
        "it is false."
      }
    }

    println(result)
    输出： it is true.
    
4.组合表达式
将多个表达式，按照花式括号括起来，即是组合表达式，组合表达式可以包含任意数量的其他表达式，包括其他被花括号括起来的表达式。
val hours = 6
val activity = "swimming"

val isOpen = {
      if (activity=="swimming" || activity == "ice skating") {
        val opens = 9
        val closes = 20
        println("operating hours: " + opens + "->" + closes)

        if (hours >= opens && hours <= closes) {
          true
        } else {
          false
        }
      } else {
        false
      }
}
println(isOpen)

------------------ 0 - 7小节总结：
1. 赋值、类型推断；
2. 语句改变状态，表达式用于表达；也即表达式产生结果，而语句不会；语句不会改变周围的状态，所以语句必须改变周围的环境才能使其执行的操作有意义，
scala中几乎一切都是表达式。
3. 计算顺序：遵循其他优先级原则；
4. 条件表达式：if ... else ...
5. 组合表达式：组合表达式的值，就是其最后一个表达式的值；例如下面例子：
val lbs = 150.0
val height = 68.0
val weightStatus = {
      val bmi = lbs/(height*height) * 703.07
      if (bmi <18.5)
        "under weight"
      else if (bmi<25)
        "normal weight"
      else
        "over weight"
      }
println(weightStatus)
